DESIGN PATTERNS:
===============
Design patterns are common solutions and best
practices used to structure code efficiently, making
it more maintainable, reusable, and scalable.

Layout-Component:
=================
Layout components are strategies for organizing and
composing components that manage the layout structure of a
project. These components typically control the positioning
and arrangement of child elements within a page, acting as
containers for other Ul elements or sections.

Container Components:
=====================
Container Components are responsible for loading and managing
data for their child components. This pattern is often used in
conjunction with Presentational Components "Dumb Components"
to keep the Ul more modular and maintainable.

Controlled:
==========
A controlled component is a form element whose value is
controlled by React state. React handles the state of the
component and updates it based on user input through event
handlers (e.g., onChange).

Uncontrolled:
=============
Uncontrolled component is a form element that maintains its own
internal state, and React does not directly manage or track the
value. Instead, we interact with the form element using refs to
access its value when needed.

HOC:Higher-Order Component
===========================
The Higher-Order Component (HOC) design pattern is used to
reuse component logic. It is a function that takes a component as
an argument and returns a new component that enhances the
original one. This pattern allows us to share functionality across
multiple components without repeating code.
HOC **note**:
==============
An HOC does not modify the original component directly,
but instead wraps it in a new component, thereby adding
additional behavior or modifying its props.

Custom Hooks:
=============
Custom hooks are a powerful feature that allows us to
encapsulate and reuse logic across components. They help to
extract component logic into reusable functions, making code
cleaner, more modular, and easier to maintain.
useHookName();
============
Factory:
========
The Factory Design Pattern is a way to create objects without
specifying exactly what kind of object you're creating. It's like having a "factory" that makes objects for us, based on some
conditions or inputs.
