DESIGN PATTERNS:
===============
Design patterns are common solutions and best
practices used to structure code efficiently, making
it more maintainable, reusable, and scalable.

Layout-Component:
=================
Layout components are strategies for organizing and
composing components that manage the layout structure of a
project. These components typically control the positioning
and arrangement of child elements within a page, acting as
containers for other Ul elements or sections.

Container Components:
=====================
Container Components are responsible for loading and managing
data for their child components. This pattern is often used in
conjunction with Presentational Components "Dumb Components"
to keep the Ul more modular and maintainable.

Controlled:
==========
A controlled component is a form element whose value is
controlled by React state. React handles the state of the
component and updates it based on user input through event
handlers (e.g., onChange).

Uncontrolled:
=============
Uncontrolled component is a form element that maintains its own
internal state, and React does not directly manage or track the
value. Instead, we interact with the form element using refs to
access its value when needed.

HOC:Higher-Order Component
===========================
The Higher-Order Component (HOC) design pattern is used to
reuse component logic. It is a function that takes a component as
an argument and returns a new component that enhances the
original one. This pattern allows us to share functionality across
multiple components without repeating code.
HOC **note**:
==============
An HOC does not modify the original component directly,
but instead wraps it in a new component, thereby adding
additional behavior or modifying its props.

Custom Hooks:
=============
Custom hooks are a powerful feature that allows us to
encapsulate and reuse logic across components. They help to
extract component logic into reusable functions, making code
cleaner, more modular, and easier to maintain.
useHookName();
============
Factory:
========
The Factory Design Pattern is a way to create objects without
specifying exactly what kind of object you're creating. It's like having a "factory" that makes objects for us, based on some
conditions or inputs.

Compound Component:
==================
The Compound Component Design Pattern allows for creating
more flexible, reusable, and easy-to-combine components. It
involves splitting a complex component into smaller, individual
subcomponents that can be used together but maintain some
degree of internal control over their behavior.

Compound *note*:
This pattern is useful when you want to create a component that
has multiple subcomponents, but you want to maintain the ability
to customize or control the behavior of each subcomponent from
the parent or container.

Slots:
=====
Slots design pattern allows a component to accept
dynamic content from its parent, and place that content
into specific areas or sections of the component.

The Slots Design Pattern is not a formal or native concept like
some other patterns In React.js, but it draws inspiration from the
way slots work in web components (especially in frameworks like
Vue.js or the Shadow DOM) or from pattern ideas in other Ul
frameworks.

Default slots:
===============
Default slot is known as children property. Whatever you
pass between the opening and closing tag of a component
is passed as children property to that component and acts
as the default slot.

Named slots:
===========
Named slots/props are simply properties that we pass to
a component, each with a specific, descriptive name.
These named props allow the child component to access
and use these values based on the names they are given.

Compound Slots:
================
The slots pattern can be applied to compound
components by defining "named slots" (using props) and
allowing the child components to customize specific areas
of a compound component. This way, each subcomponent
acts like a slot that can be filled with different content.

Render Props:
============
Render Props pattern is used to share code between
components by passing a function as a prop to a
component. The function, which is typically referred to as
the "render prop" returns a React element that gets
rendered. This pattern allows components to be more
flexible and reusable, as the parent component can
control the rendering of content in its child component.